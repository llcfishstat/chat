generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatroom {
  id            String          @id @default(uuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  messages      Message[]
  chatroomUsers ChatroomUsers[]
  media         Media[]
  type          ChatroomType    @default(Private)

  @@map("chatrooms")
}

model Message {
  id         String        @id @default(uuid())
  content    String
  userId     String        @db.Uuid
  chatroomId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  chatroom   Chatroom      @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  status     MessageStatus @default(Pending)
  media      Media[]

  @@map("messages")
}

model ChatroomUsers {
  chatroomId String
  userId     String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
  @@map("chatroom_user")
}

model Media {
  id         String    @id @default(uuid())
  userId     String    @db.Uuid
  url        String
  filename   String
  chatroomId String
  messageId  String?
  type       MediaType
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  chatroom Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  message  Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("media")
}

enum MessageStatus {
  Pending
  Sent
  DeliveredToCloud
  DeliveredToDevice
  Seen
}

enum MediaType {
  Photo
  Video
  File
}

enum ChatroomType {
  Private
  Auction
}
